---
layout:         post
title:          NFL STATS 1
subtitle:       Scraping and cleaning data from Pro-Football-Reference.com
card-image:     /assets/images/pos_points.png
date:           2017-09-01 14:14:00
tags:           code R ggplot2 tidyverse rvest
post-card-type: article
---

This series will use historical data from NFL seasons between 1992 and 2016 to illustrate some data munging, analysis, and visualization techniques in R. American football is particularly suited to analysis because of its stop / reset / start structure, the singular focus of every play (one pass, one run, one kick etc.), and the strictly defined, narrow roles played by each man on the field.

Pro-Football-Reference has a wealth of freely available detailed historical data. We are going to use `rvest` and `dplyr`, part of the `tidyverse`, to scrape, clean, and concatenate that historical data.


## Scraping functions


For each table on their site, PFR offers the option of saving the data as a `.csv` file. While this would be congenial if we wanted to look at one or two years of data, doing it 24 times would be tedious and, for me at least, prone to errors. The `rvest` package makes scraping the tables automatically virtually painless. With the added benefit that the data can be reloaded from scratch in the event of a mistake, the benefits of building the `scrape_fantasy` function far outweigh the costs.  


### Get one table from PFR


```r
#' Scrape and clean data from profootballreference.com for a single
#' returns a single tibble with a position, passing, rushing, receiving
#' statistics for each player, along with age etc.
#'
#' @param yr integer -- integers between 1992 and 2016
#'
#' @return tbl_clean a tibble
#' @export
#'
#' @examples
#'
pfr_single <- function(yr) {
  url <- sprintf("https://www.pro-football-reference.com/years/%d/fantasy.htm",
                 yr)

  cols <- c("rank", "name", "team", "pos", "age", "played", "started",
            "pass_cmp", "pass_att", "pass_yds", "pass_td", "pass_int",
            "rush_att", "rush_yds", "rush_ypc", "rush_td",
            "rec_tgt", "rec_rec", "rec_yds", "rec_ypr", "rec_td",
            "f_points", "dkpt", "fdpt", "vbd", "pos_rank", "ov_rank")
  print(url)
  tbl_raw <- (read_html(url) %>%
                html_table(header = FALSE))[[1]]

  colnames(tbl_raw) <- cols

  tbl_clean <- tbl_raw %>%
    mutate(year = yr, rank = as.integer(rank)) %>%
    filter(complete.cases(.))

  return(tbl_clean)
}
```

### Apply pfr_single to a to a range of years

`scrape_fantasy` applies (using `lapply`) the pfr_single function to a vector of years, which returns a list of data frames that are bound together using `dplyr::bind_rows`. Before returning the bound data, we use `dplyr::mutate_at` to type all of the numeric columns, and then filter out players that have no fantasy points recorded in a season.

```r

#' Scrape and clean data from profootballreference.com for a range of years.
#' returns a single tibble with a position, passing, rushing, receiving
#' statistics for each player, along with age etc.
#'
#' @param yrs vector -- integers between 1993 and 2016
#' @param write logical -- whether or not to write the cleaned data to a csv in
#' the ./Data folder
#'
#' @return df_bound a tibble
#' @export fantasy_data_YRSTART_YREND.csv
#'
#' @examples
#'
scrape_fantasy <- function(yrs, write = TRUE) {
  suppressWarnings(
    df_bound <- lapply(yrs, pfr_single) %>%
      bind_rows() %>%
      as_data_frame() %>%
      mutate_at(
        .vars = vars(-name, -team, -pos),
        .funs = as.numeric
      ) %>%
      filter(pos != "", !is.na(f_points))
  )

  if(write) {
    write_csv(df_bound,
      sprintf("./Data/fantasy_data_%d_%d.csv", min(yrs), max(yrs)))
  }
  return(df_bound)
}
```

## Example plots

We use the `scrape_fantasy` function defined above to collect season totals for each offensive player for the seasons between 1992 and 2016.

```r
df_stats <- scrape_fantasy(yrs = 1992:2016)
```

Now that the data are all together, cleaned, and correctly typed, `ggplot2` offers a set of tools for quickly making exploratory visualizations. The following plots are not particularly refined, but they are a pretty good representation of the kind of thing that I would do when approaching any new data set "in the wild", so to speak.

### Total point distributions by position

The facetted histogram (or density plot) is a favourite tool of mine for identifying differences among groups.

code
```r
df_stats %>%
  filter(f_points > 0) %>%
  ggplot(aes(f_points, fill = pos)) +
  geom_histogram(binwidth = 1) +
  ggthemes::scale_fill_wsj() +
  facet_grid(pos~.)
```
plot
![season points by position plot]({{ site.url }}/assets/images/pos_points.png)

### Total point concentrations by age (with player count bars)

Jitter plots are imprecise by nature, but I like them when trying to get a sense of a continuous variable's distribution as a function of a discrete variable, where a regular scatter plot would be unclear because many points would be stacked up on one another. I favour them over violin plots and boxplots because I find that those can obfuscate potentially interesting facts of the distributions in question.

This plot also includes bars behind the jittered points that indicate the number of players that have played a season between 1992 and 2016 at the given age and position. Therefore the y-axis of each facet represents both fantasy points and number of players at the position.

code

```r
df_stats %>%
  filter(f_points > 0) %>%
  ggplot(aes(age)) +
  geom_bar(alpha = 0.4) +
  geom_jitter(aes(y = f_points, colour = pos), alpha = 0.1)
  ggthemes::scale_color_wsj() +
  facet_grid(pos~.)
```

plot

![season points by age]({{ site.url }}/assets/images/age_points.png)
